USE adventure_work_project_hrithik;

SELECT * FROM BOOK1;

#data is upload in the database 
select * from book1;

CREATE TABLE DUPLICATE_BOOK
LIKE BOOK1;

INSERT DUPLICATE_BOOK
SELECT * FROM BOOK1;

SELECT * FROM DUPLICATE_BOOK;


# sum of sales 
SELECT round(sum(salesamount)) AS TOTAL_SALES from DUPLICATE_BOOK;

#SUM OF PROFIT
SELECT SUM(PROFIT) AS TOTAL_PROFIT FROM DUPLICATE_BOOK;

#OREDR COUNT 
SELECT COUNT(ORDERQUANTITY) AS TOTAL_ORDERS FROM DUPLICATE_BOOK;

#CUSTOMER COUNT
SELECT DISTINCT COUNT(Customer_Fullname) AS TOTAL_CUSTOMERS FROM DUPLICATE_BOOK;

#count of distinct customers
SELECT CUSTOMER_FULLNAME,
ROW_NUMBER() OVER(PARTITION BY CUSTOMER_FULLNAME, CUSTOMERKEY) AS ROW_NUM FROM DUPLICATE_BOOK;

#FIND THE DUPLICATES
WITH DUPLICATE_CTE AS
(SELECT CUSTOMER_FULLNAME,
ROW_NUMBER() OVER(PARTITION BY CUSTOMER_FULLNAME, CUSTOMERKEY) AS ROW_NUM FROM DUPLICATE_BOOK)
SELECT * FROM DUPLICATE_CTE
WHERE ROW_NUM > 1;

#CREATE DUPLICATE TABLE TO REMOVE THE DUPLICATE 
CREATE TABLE `duplicate_book2` (
  `ProductKey` int DEFAULT NULL,
  `Product Name` text,
  `OrderDateKey` int DEFAULT NULL,
  `DueDateKey` int DEFAULT NULL,
  `ShipDateKey` int DEFAULT NULL,
  `CustomerKey` int DEFAULT NULL,
  `Customer_Fullname` text,
  `PromotionKey` int DEFAULT NULL,
  `CurrencyKey` int DEFAULT NULL,
  `SalesTerritoryKey` int DEFAULT NULL,
  `SalesOrderNumber` text,
  `SalesOrderLineNumber` int DEFAULT NULL,
  `RevisionNumber` int DEFAULT NULL,
  `OrderQuantity` int DEFAULT NULL,
  `UnitPrice` double DEFAULT NULL,
  `ExtendedAmount` double DEFAULT NULL,
  `DiscountAmount` int DEFAULT NULL,
  `ProductStandardCost` double DEFAULT NULL,
  `TotalProductCost` int DEFAULT NULL,
  `SalesAmount` double DEFAULT NULL,
  `TaxAmt` double DEFAULT NULL,
  `Freight` double DEFAULT NULL,
  `Date` text,
  `OrderDateKey_[0]` int DEFAULT NULL,
  `Year` int DEFAULT NULL,
  `Month_Number` int DEFAULT NULL,
  `Day` int DEFAULT NULL,
  `Combine` text,
  `Month_Name` text,
  `Quarter` text,
  `Year_Month` text,
  `Day_of_Week` int DEFAULT NULL,
  `Week day name` text,
  `FinancialMonth` int DEFAULT NULL,
  `Financialquarter` text,
  `Sales_Amount` text,
  `ProductionCost` double DEFAULT NULL,
  `Profit` text,
  `Country` text,
  `Region` text,
  `Row_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


INSERT DUPLICATE_BOOK2
SELECT *,
ROW_NUMBER() OVER(PARTITION BY CUSTOMER_FULLNAME, CUSTOMERKEY) AS ROW_NUM FROM DUPLICATE_BOOK;

SELECT * FROM DUPLICATE_BOOK2;

DELETE FROM DUPLICATE_BOOK2
WHERE ROW_NUM >1;

#TOTAL CUSTOMERS 
SELECT DISTINCT COUNT(CUSTOMER_FULLNAME) AS TOTAL_CUSTOMERS FROM DUPLICATE_BOOK2;


#COUNT TOTAL PRODUCT

SELECT PRODUCT_NAME,
ROW_NUMBER() OVER(PARTITION BY PRODUCT_NAME) AS ROW_NUM FROM DUPLICATE_BOOK;

#FIND THE DUPLICATES PRODUCTS
WITH DUPLICATE_PRODUCT_CTE AS
(SELECT PRODUCT_NAME,
ROW_NUMBER() OVER(PARTITION BY PRODUCT_NAME) AS ROW_NUM FROM DUPLICATE_BOOK)
SELECT * FROM DUPLICATE_PRODUCT_CTE
WHERE ROW_NUM >1;

CREATE TABLE `duplicate_book_PRODUCT` (
  `ProductKey` int DEFAULT NULL,
  `Product_Name` text,
  `OrderDateKey` int DEFAULT NULL,
  `DueDateKey` int DEFAULT NULL,
  `ShipDateKey` int DEFAULT NULL,
  `CustomerKey` int DEFAULT NULL,
  `Customer_Fullname` text,
  `PromotionKey` int DEFAULT NULL,
  `CurrencyKey` int DEFAULT NULL,
  `SalesTerritoryKey` int DEFAULT NULL,
  `SalesOrderNumber` text,
  `SalesOrderLineNumber` int DEFAULT NULL,
  `RevisionNumber` int DEFAULT NULL,
  `OrderQuantity` int DEFAULT NULL,
  `UnitPrice` double DEFAULT NULL,
  `ExtendedAmount` double DEFAULT NULL,
  `DiscountAmount` int DEFAULT NULL,
  `ProductStandardCost` double DEFAULT NULL,
  `TotalProductCost` int DEFAULT NULL,
  `SalesAmount` double DEFAULT NULL,
  `TaxAmt` double DEFAULT NULL,
  `Freight` double DEFAULT NULL,
  `Date` text,
  `OrderDateKey_[0]` int DEFAULT NULL,
  `Year` int DEFAULT NULL,
  `Month_Number` int DEFAULT NULL,
  `Day` int DEFAULT NULL,
  `Combine` text,
  `Month_Name` text,
  `Quarter` text,
  `Year_Month` text,
  `Day_of_Week` int DEFAULT NULL,
  `Week day name` text,
  `FinancialMonth` int DEFAULT NULL,
  `Financialquarter` text,
  `Sales_Amount` text,
  `ProductionCost` double DEFAULT NULL,
  `Profit` text,
  `Country` text,
  `Region` text,
  `ROW_NUM` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT DUPLICATE_BOOK_PRODUCT SELECT *,
ROW_NUMBER() OVER(PARTITION BY PRODUCT_NAME) AS ROW_NUM FROM DUPLICATE_BOOK;

DELETE FROM DUPLICATE_BOOK_PRODUCT
WHERE ROW_NUM >1;

#COUNT OF TOTAL PRODUCT
SELECT DISTINCT COUNT(PRODUCT_NAME) AS TOTAL_PRODUCT FROM DUPLICATE_BOOK_PRODUCT;

#SALES BY PRODUCT

SELECT PRODUCT_NAME, SALES_AMOUNT FROM DUPLICATE_BOOK ORDER BY SALES_AMOUNT desc;

SELECT SALES_AMOUNT FROM DUPLICATE_BOOK;


#sales by region
SELECT DISTINCT REGION, SUM(SALES_AMOUNT) AS TOTAL_SALES FROM DUPLICATE_BOOK 
GROUP BY REGION ORDER BY TOTAL_SALES DESC;

#SALES BY COUNTRY
SELECT DISTINCT COUNTRY, SUM(SALES_AMOUNT) AS TOTAL_SALES FROM DUPLICATE_BOOK 
GROUP BY COUNTRY ORDER BY TOTAL_SALES DESC;


#TOP 5 CUSTOMERS BY SALES 

SELECT CUSTOMER_FULLNAME, SUM(SALES_AMOUNT) AS TOTAL_SALES FROM DUPLICATE_BOOK 
GROUP BY 1 ORDER BY 2
 DESC LIMIT 5;


#LEAST 5 CUSTOMERS BY  SALES 
SELECT CUSTOMER_FULLNAME, SUM(SALES_AMOUNT) AS TOTAL_SALES FROM DUPLICATE_BOOK 
GROUP BY 1 ORDER BY 2
 ASC LIMIT 5;
 
 
#TOP 5 PRODUCT BY SALES 
SELECT PRODUCT_NAME,SUM(SALES_AMOUNT) AS TOTAL_SALES FROM DUPLICATE_BOOK
 GROUP BY 1 ORDER BY 2 DESC LIMIT 5;

#LEAST 5 PRODUCT BY SALES 
SELECT PRODUCT_NAME,SUM(SALES_AMOUNT) AS TOTAL_SALES FROM DUPLICATE_BOOK
 GROUP BY 1 ORDER BY 2 ASC LIMIT 5;


#YEARLY SALES 

SELECT YEAR, SUM(SALES_AMOUNT) AS TOTAL_SALES FROM DUPLICATE_BOOK
GROUP BY YEAR ORDER BY TOTAL_SALES DESC;



#MONTHLY_SALES
SELECT MONTH_NAME, SUM(SALES_AMOUNT) AS TOTAL_SALES FROM DUPLICATE_BOOK
GROUP BY MONTH_NAME ORDER BY TOTAL_SALES DESC;

SELECT * FROM DUPLICATE_BOOK;

SELECT * FROM DIMPRODUCTCATEGORY;

SELECT * FROM DIMPRODUCTSUBCATEGORY;

SELECT  T1.ENGLISHPRODUCTCATEGORYNAME AS CATEGORY_NAME,  T2.PRODUCTSUBCATEGORYNAME AS SUB_CATEGORY_NAME FROM DIMPRODUCTCATEGORY T1
 JOIN  DIMPRODUCTSUBCATEGORY T2 
 ON T1.PRODUCTCATEGORYKEY=T2.PRODUCTCATEGORYKEY;
















